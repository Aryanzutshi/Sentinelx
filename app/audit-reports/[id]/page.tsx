"use client"

import { useState, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import { Navigation } from "@/components/navigation"
import { Footer } from "@/components/footer"
import { Button } from "@/components/ui/button"
import { 
  ArrowLeft, 
  Download, 
  Share, 
  FileText, 
  Calendar,
  Clock,
  Shield,
  AlertTriangle,
  CheckCircle,
  XCircle
} from "lucide-react"
import ReactMarkdown from 'react-markdown'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism'

interface AuditReport {
  id: string
  contractName: string
  contractAddress: string
  transactionHash: string
  walletAddress: string
  timestamp: string
  score: number
  status: string
  scanDuration: string
  report: string
  issues: {
    critical: number
    high: number
    medium: number
    low: number
    info: number
  }
}

export default function AuditReportPage() {
  const params = useParams()
  const router = useRouter()
  const [auditData, setAuditData] = useState<AuditReport | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (params.id) {
      fetchAuditReport(params.id as string)
    }
  }, [params.id])

  const fetchAuditReport = async (id: string) => {
    try {
      const response = await fetch(`/api/audits/${id}`)
      
      if (!response.ok) {
        throw new Error('Failed to fetch audit report')
      }

      const data = await response.json()
      setAuditData(data)
    } catch (err) {
      console.error('Error fetching audit report:', err)
      setError(err instanceof Error ? err.message : 'Failed to load audit report')
    } finally {
      setLoading(false)
    }
  }

  const handleDownload = () => {
    if (!auditData) return

    const content = `# Security Audit Report

**Contract:** ${auditData.contractName}
**Address:** ${auditData.contractAddress}
**Transaction Hash:** ${auditData.transactionHash}
**Audit Date:** ${new Date(auditData.timestamp).toLocaleDateString()}
**Security Score:** ${auditData.score}/100

---

${auditData.report}

---

*Generated by SentinelX AI Security Auditor*
`

    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${auditData.contractName}_audit_report.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const getScoreColor = (score: number) => {
    if (score >= 90) return "text-green-500"
    if (score >= 80) return "text-green-400"
    if (score >= 70) return "text-yellow-500"
    if (score >= 60) return "text-orange-500"
    return "text-red-500"
  }

  const getScoreIcon = (score: number) => {
    if (score >= 90) return <CheckCircle className="h-6 w-6 text-green-500" />
    if (score >= 70) return <AlertTriangle className="h-6 w-6 text-yellow-500" />
    return <XCircle className="h-6 w-6 text-red-500" />
  }

  if (loading) {
    return (
      <main className="min-h-screen bg-black text-green-500 font-mono">
        <Navigation />
        <section className="pt-32 pb-16 px-4">
          <div className="max-w-4xl mx-auto text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-2 border-green-500 border-t-transparent mx-auto mb-4" />
            <p>Loading audit report...</p>
          </div>
        </section>
      </main>
    )
  }

  if (error || !auditData) {
    return (
      <main className="min-h-screen bg-black text-green-500 font-mono">
        <Navigation />
        <section className="pt-32 pb-16 px-4">
          <div className="max-w-4xl mx-auto text-center">
            <XCircle className="h-16 w-16 mx-auto mb-4 text-red-500" />
            <h1 className="text-2xl font-bold mb-4">Report Not Found</h1>
            <p className="text-green-400 mb-6">{error || 'The requested audit report could not be found.'}</p>
            <Button 
              onClick={() => router.push('/dashboard')}
              className="bg-green-600 hover:bg-green-700 text-black font-bold"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Dashboard
            </Button>
          </div>
        </section>
      </main>
    )
  }

  return (
    <main className="min-h-screen bg-black text-green-500 font-mono">
      <Navigation />
      
      <section className="pt-32 pb-16 px-4">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
            <div className="flex items-center mb-4 md:mb-0">
              <Button
                variant="ghost"
                onClick={() => router.back()}
                className="mr-4 text-green-500 hover:bg-green-950/50"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back
              </Button>
              <div>
                <div className="inline-flex items-center bg-green-950/50 px-4 py-2 rounded-full mb-2">
                  <FileText className="h-4 w-4 mr-2" />
                  <span className="text-sm">Security Audit Report</span>
                </div>
                <h1 className="text-2xl md:text-3xl font-bold">
                  {auditData.contractName}
                </h1>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <Button
                variant="outline"
                onClick={handleDownload}
                className="border-green-800 text-green-500 hover:bg-green-950/50"
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </div>

          {/* Report Metadata */}
          <div className="bg-green-950/10 border border-green-900 rounded-lg p-6 mb-8">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="flex items-center">
                {getScoreIcon(auditData.score)}
                <div className="ml-3">
                  <div className="text-sm text-green-400">Security Score</div>
                  <div className={`text-xl font-bold ${getScoreColor(auditData.score)}`}>
                    {auditData.score}/100
                  </div>
                </div>
              </div>

              <div className="flex items-center">
                <Calendar className="h-6 w-6 text-green-400" />
                <div className="ml-3">
                  <div className="text-sm text-green-400">Audit Date</div>
                  <div className="font-bold">
                    {new Date(auditData.timestamp).toLocaleDateString()}
                  </div>
                </div>
              </div>

              <div className="flex items-center">
                <Clock className="h-6 w-6 text-green-400" />
                <div className="ml-3">
                  <div className="text-sm text-green-400">Scan Duration</div>
                  <div className="font-bold">{auditData.scanDuration}</div>
                </div>
              </div>

              <div className="flex items-center">
                <Shield className="h-6 w-6 text-green-400" />
                <div className="ml-3">
                  <div className="text-sm text-green-400">Status</div>
                  <div className="font-bold">{auditData.status}</div>
                </div>
              </div>
            </div>

            <div className="mt-6 pt-6 border-t border-green-900">
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-center">
                <div>
                  <div className="text-red-500 font-bold text-lg">{auditData.issues.critical}</div>
                  <div className="text-xs text-green-400">Critical</div>
                </div>
                <div>
                  <div className="text-orange-500 font-bold text-lg">{auditData.issues.high}</div>
                  <div className="text-xs text-green-400">High</div>
                </div>
                <div>
                  <div className="text-yellow-500 font-bold text-lg">{auditData.issues.medium}</div>
                  <div className="text-xs text-green-400">Medium</div>
                </div>
                <div>
                  <div className="text-blue-500 font-bold text-lg">{auditData.issues.low}</div>
                  <div className="text-xs text-green-400">Low</div>
                </div>
                <div>
                  <div className="text-gray-400 font-bold text-lg">{auditData.issues.info}</div>
                  <div className="text-xs text-green-400">Info</div>
                </div>
              </div>
            </div>
          </div>

          {/* Report Content */}
          <div className="bg-green-950/10 border border-green-900 rounded-lg p-8">
            <div className="prose prose-invert prose-green max-w-none">
              <ReactMarkdown
                components={{
                  code({node, className, children, ...props}: any) {
                    const match = /language-(\w+)/.exec(className || '')
                    const isInline = !match
                    return !isInline && match ? (
                      <SyntaxHighlighter
                        style={tomorrow as any}
                        language={match[1]}
                        PreTag="div"
                        {...props}
                      >
                        {String(children).replace(/\n$/, '')}
                      </SyntaxHighlighter>
                    ) : (
                      <code className={`${className} bg-green-950/50 px-1 py-0.5 rounded text-green-300`} {...props}>
                        {children}
                      </code>
                    )
                  },
                  h1: ({children}) => (
                    <h1 className="text-2xl font-bold text-green-400 mb-4 pb-2 border-b border-green-800">
                      {children}
                    </h1>
                  ),
                  h2: ({children}) => (
                    <h2 className="text-xl font-bold text-green-400 mb-3 mt-6">
                      {children}
                    </h2>
                  ),
                  h3: ({children}) => (
                    <h3 className="text-lg font-bold text-green-400 mb-2 mt-4">
                      {children}
                    </h3>
                  ),
                  p: ({children}) => (
                    <p className="text-green-300 mb-4 leading-relaxed">
                      {children}
                    </p>
                  ),
                  ul: ({children}) => (
                    <ul className="text-green-300 mb-4 pl-6 list-disc">
                      {children}
                    </ul>
                  ),
                  ol: ({children}) => (
                    <ol className="text-green-300 mb-4 pl-6 list-decimal">
                      {children}
                    </ol>
                  ),
                  li: ({children}) => (
                    <li className="mb-1">
                      {children}
                    </li>
                  ),
                  blockquote: ({children}) => (
                    <blockquote className="border-l-4 border-green-600 pl-4 italic text-green-400 my-4">
                      {children}
                    </blockquote>
                  ),
                  strong: ({children}) => (
                    <strong className="text-green-400 font-bold">
                      {children}
                    </strong>
                  ),
                  em: ({children}) => (
                    <em className="text-green-400 italic">
                      {children}
                    </em>
                  ),
                }}
              >
                {auditData.report}
              </ReactMarkdown>
            </div>
          </div>

          {/* Contract Details */}
          <div className="mt-8 bg-green-950/10 border border-green-900 rounded-lg p-6">
            <h3 className="text-lg font-bold mb-4">Contract Information</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-green-400">Contract Address:</span>
                <div className="font-mono break-all">{auditData.contractAddress}</div>
              </div>
              <div>
                <span className="text-green-400">Transaction Hash:</span>
                <div className="font-mono break-all">{auditData.transactionHash}</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <Footer />
    </main>
  )
}